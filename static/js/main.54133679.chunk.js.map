{"version":3,"sources":["SingleRecipe.js","App.js","serviceWorker.js","index.js"],"names":["SingleRecipe","props","react_default","a","createElement","className","key","link","title","src","imgSrc","alt","ingredients","map","ing","i","text","healthLabels","label","yield","href","APP","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","userInput","target","value","console","log","state","handleClick","preventDefault","axios","method","url","dataResponse","params","app_id","app_key","format","q","health","recipe","then","response","data","hits","Recipes","document","getElementById","scrollIntoView","behavior","action","type","name","placeholder","onChange","onClick","class","id","src_SingleRecipe","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54133679.chunk.js","sourcesContent":["import React from 'react';\n\nconst SingleRecipe = (props) => {\n    return( \n        <ul className =\"recipeCard\" key={props.link}>\n            <li>\n                <h2>{props.title}</h2>\n                <img src={props.imgSrc} alt={props.title}/>\n                <div className = \"recipeContent\">\n                    <ul>\n                        <h3>Ingredient List:</h3>\n                        {props.ingredients.map((ing, i) => {\n                            return <li>{ing.text}</li>              \n                        })}\n                    </ul>\n                    <ul>\n                        <h3>Health Label:</h3>\n                        {props.healthLabels.map((label, i)=> {\n                            return <li>{label}</li>\n                        })} \n                    </ul>      \n                    <h3>Serving Size: {props.yield}</h3>\n                    <h3><a href={props.link}>Get Recipe Here!</a></h3>\n                </div>\n            </li>  \n        </ul>  \n    )\n}\n\nexport default SingleRecipe","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport SingleRecipe from './SingleRecipe.js';\n\n\n\nclass APP extends Component {\n  constructor() {\n    super();\n    // Create an empty initial state;\n    this.state = {\n      Recipes: [],\n      userInput: '',\n    }\n  }\n\n  // Binding the user's input to create controlled information\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    })\n    console.log(this.state.userInput)\n  }\n\n  \n  // Create an event listener for user input\n  handleClick = (event) => {\n    event.preventDefault();\n    \n\n    const api_id = \"5ad9a9d2\";\n    const api_key = \"399ab75c6d5b4547cd58b52f7a7d73fd\";\n    const { userInput } = this.state;\n\n    axios({\n      method: \"GET\",\n      url: `https://api.edamam.com/search`,\n      dataResponse: \"json\",\n      params: {\n        app_id: api_id,\n        app_key: api_key,\n        format: \"json\",\n        q: userInput,\n        health: \"vegan\",\n        healthLabels: \"vegetarian\",\n        recipe: \"recipe\",\n      } \n    }).then(response => {\n        response = response.data.hits\n        console.log(response);\n\n      this.setState({\n        Recipes: response\n      }, () => {\n        document.getElementById(\"results\").scrollIntoView({\n          behavior: \"smooth\"\n        })\n      })\n    })\n    \n    \n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n      <header className=\"app-header\">\n        <div className=\"wrapper-header-content\">\n          <h1>Abbiocco</h1>\n          <h4>A Vegan & Vegetarian Recipe Generator</h4>\n          <form action=\"\" className=\"header-form\">\n            <input \n            type = \"text\"\n            name = \"search\"\n            value = {this.state.value}\n            placeholder = \"Search for your Vegan or Vegetarian Recipe\"\n            onChange = {this.handleChange}\n            />\n            \n            <button onClick = {this.handleClick}><i class=\"fas fa-search\"></i></button >\n          </form>\n        </div>\n      </header> \n      \n\n        <div className=\"flexContainer\">\n          {this.state.Recipes.map(recipe => {\n            console.log(recipe)\n\n\n            return (\n              <div className = \"recipeBook\" id=\"results\">\n                    <SingleRecipe\n                    title = {recipe.recipe.label}\n                    imgSrc = {recipe.recipe.image} \n                    link = {recipe.recipe.url}\n                    yield = {recipe.recipe.yield}\n                    ingredients={recipe.recipe.ingredients}\n                    healthLabels = {recipe.recipe.healthLabels}\n                    key = {recipe.recipe.url}\n                    />\n              </div>\n            \n            )\n            \n            \n          })} \n        </div>      \n        \n      </div>\n\n\n    )\n  }\n}\n\nexport default APP;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}